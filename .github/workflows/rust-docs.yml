name: Rust Documentation

env:
  SQLX_OFFLINE: true
  CARGO_TERM_COLOR: always

on:
  # Deploy permanent docs on main branch pushes
  push:
    branches:
      - main

  # Deploy preview docs on pull requests and handle cleanup
  pull_request:
    types: [opened, synchronize, reopened, closed]

  # Allow manual triggering for urgent documentation updates and debugging
  workflow_dispatch:

# Per-PR concurrency: Cancel older runs of the same PR to avoid redundant work
concurrency:
  group: ${{ github.event_name == 'pull_request' && format('docs-pr-{0}', github.event.pull_request.number) || 'docs-main' }}
  cancel-in-progress: true

permissions:
  contents: write      # Required to push commits to gh-pages branch
  pull-requests: write # Required to comment on PRs with preview links

jobs:
  # Test documentation (runs in parallel for fast feedback)
  test-docs:
    name: Test Documentation
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'

    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install the required version of uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.9"

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: "v0.10.0"

      # - name: Set up Tools
      #   run: make tools-setup

      # - name: Set up Rust
      #   run: make rust-setup

      # - name: Test documentation
      #   run: make rust-doc-test

      - name: Comment on PR about test failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const branchName = context.payload.pull_request.head.ref;
            const commitSha = context.payload.pull_request.head.sha.substring(0, 7);
            const workflowUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;

            const comment = `## ❌ Documentation Tests Failed

            The documentation tests for this PR failed.

            **📋 Failure Details:**
            - **Branch:** \`${branchName}\`
            - **Commit:** \`${commitSha}\`
            - **Workflow Run:** [View logs](${workflowUrl})

            **🔧 Next Steps:**
            1. Check the [workflow logs](${workflowUrl}) for test failure details
            2. Fix the failing documentation tests in your code
            3. Push new commits (will trigger automatically), or
            4. Manually trigger the workflow from the [Actions tab](https://github.com/${{ github.repository }}/actions/workflows/rust-docs.yml)

            > **Note:** Documentation tests must pass before documentation can be built and deployed.
            > Common issues include broken code examples in doc comments or missing dependencies.

            ---
            *🤖 Generated by GitHub Actions*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

            console.log(`Added test failure notification to PR #${prNumber}`);

  # Build and deploy documentation (waits for tests to pass)
  build-and-deploy:
    name: Build and Deploy Documentation
    runs-on: ubuntu-latest
    needs: test-docs
    if: github.event.action != 'closed'

    # Global deployment queue: Prevent race conditions on gh-pages branch
    concurrency:
      group: docs-deployment-queue
      cancel-in-progress: false

    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install the required version of uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.9"

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: "v0.10.0"

      # - name: Set up Tools
      #   run: make tools-setup

      # - name: Set up Rust
      #   run: make rust-setup

      # - name: Build comprehensive documentation
      #   run: make rust-doc-build

      - name: Prepare deployment variables
        id: deployment-vars
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            DOCS_FOLDER="pr-${PR_NUMBER}"
            COMMIT_MESSAGE="Update documentation for PR #${PR_NUMBER}"
            BRANCH_NAME="${{ github.head_ref }}"
          else
            DOCS_FOLDER="main"
            COMMIT_MESSAGE="Update main branch documentation"
            BRANCH_NAME="${{ github.ref_name }}"
          fi

          echo "docs-folder=${DOCS_FOLDER}" >> $GITHUB_OUTPUT
          echo "commit-message=${COMMIT_MESSAGE}" >> $GITHUB_OUTPUT
          echo "branch-name=${BRANCH_NAME}" >> $GITHUB_OUTPUT

          echo "📁 Documentation folder: ${DOCS_FOLDER}"
          echo "💬 Commit message: ${COMMIT_MESSAGE}"
          echo "🌿 Branch: ${BRANCH_NAME}"

      - name: Deploy documentation to gh-pages with clean history
        id: deploy
        run: |
          DOCS_FOLDER="${{ steps.deployment-vars.outputs.docs-folder }}"
          COMMIT_MESSAGE="${{ steps.deployment-vars.outputs.commit-message }}"

          # Clone gh-pages branch
          git clone --single-branch --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages-repo || {
            echo "gh-pages branch doesn't exist, creating it..."
            git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages-repo
            cd gh-pages-repo
            git checkout --orphan gh-pages
            git rm -rf . || true

            # Create empty commit to initialize the branch
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git commit --allow-empty -m "Initialize gh-pages branch"
            git push origin gh-pages
            cd ..
          }

          cd gh-pages-repo

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create fresh orphan branch (erases all history but preserves existing folders)
          git checkout --orphan temp-branch
          git rm -rf . || true

          # Copy all existing folders from the current gh-pages branch
          git checkout gh-pages -- . || true

          # Update/create the specific docs folder for this deployment
          rm -rf "${DOCS_FOLDER}" || true
          mkdir -p "${DOCS_FOLDER}"
          mkdir tmp_dir || true
          cd tmp_dir
          echo "hello world ${DOCS_FOLDER}" > hello_world.txt
          cd ..
          cp -r tmp_dir/* "${DOCS_FOLDER}/"
          rm -rf tmp_dir

          # Commit and force push (erases all previous history)
          git add .
          git commit -m "${COMMIT_MESSAGE}"
          git branch -D gh-pages || true
          git branch -m gh-pages
          git push --force origin gh-pages

          # Set deployment URL for later steps
          REPO_NAME="${{ github.repository }}"
          REPO_OWNER="${{ github.repository_owner }}"
          BASE_URL="https://${REPO_OWNER}.github.io/${REPO_NAME##*/}"
          DEPLOYMENT_URL="${BASE_URL}/${DOCS_FOLDER}/"

          echo "DEPLOYMENT_URL=${DEPLOYMENT_URL}" >> $GITHUB_ENV
          echo "🚀 Documentation available at: ${DEPLOYMENT_URL}"

      - name: Comment on PR about deployment failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const branchName = context.payload.pull_request.head.ref;
            const commitSha = context.payload.pull_request.head.sha.substring(0, 7);
            const workflowUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;

            const comment = `## ❌ Documentation Deployment Failed

            The documentation build or deployment for this PR failed.

            **📋 Failure Details:**
            - **Branch:** \`${branchName}\`
            - **Commit:** \`${commitSha}\`
            - **Workflow Run:** [View logs](${workflowUrl})

            **🔧 Next Steps:**
            1. Check the [workflow logs](${workflowUrl}) for error details
            2. Fix any issues in your code
            3. Push new commits (will trigger automatically), or
            4. Manually trigger the workflow from the [Actions tab](https://github.com/${{ github.repository }}/actions/workflows/rust-docs.yml)

            > **Note:** Documentation deployment failures are usually due to build errors or temporary GitHub issues.
            > The workflow will automatically retry when you push new commits.

            ---
            *🤖 Generated by GitHub Actions*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

            console.log(`Added failure notification to PR #${prNumber}`);

      - name: Comment on PR with deployment URL
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = process.env.DEPLOYMENT_URL;
            const branchName = '${{ steps.deployment-vars.outputs.branch-name }}';
            const docsFolder = '${{ steps.deployment-vars.outputs.docs-folder }}';
            const prNumber = context.payload.pull_request.number;
            const commitSha = context.payload.pull_request.head.sha.substring(0, 7);

            const comment = `## 📚 Documentation Preview

            The documentation for this PR has been deployed and is available at:

            **🔗 [Preview Documentation](${deploymentUrl})**

            **📋 Deployment Details:**
            - **Branch:** \`${branchName}\`
            - **Commit:** \`${commitSha}\`
            - **Folder:** \`${docsFolder}/\`
            - **URL:** \`${deploymentUrl}\`

            > **Note:** This documentation is hosted in the \`${docsFolder}/\` folder on the gh-pages branch.
            > The URL will remain accessible until the PR is closed and cleaned up.
            > Each PR gets its own unique documentation folder.

            ---
            *🤖 Generated by GitHub Actions*`;

            // Find existing preview comment to update or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.find(comment =>
              comment.body.includes('📚 Documentation Preview')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
              console.log('Updated existing PR comment with new deployment URL');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
              console.log('Created new PR comment with deployment URL');
            }

      - name: Create deployment summary
        run: |
          echo "## 🚀 Documentation Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment URL:** ${DEPLOYMENT_URL}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ steps.deployment-vars.outputs.branch-name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Folder:** ${{ steps.deployment-vars.outputs.docs-folder }}/" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "🔍 **PR Preview:** This is a pull request preview deployment." >> $GITHUB_STEP_SUMMARY
            echo "The URL will be automatically posted as a comment on the PR." >> $GITHUB_STEP_SUMMARY
            echo "Documentation is stored in the \`${{ steps.deployment-vars.outputs.docs-folder }}/\` folder on the gh-pages branch." >> $GITHUB_STEP_SUMMARY
          else
            echo "🌟 **Main Branch:** This is the main branch documentation deployment." >> $GITHUB_STEP_SUMMARY
            echo "This URL represents the latest stable documentation." >> $GITHUB_STEP_SUMMARY
            echo "Documentation is stored in the \`${{ steps.deployment-vars.outputs.docs-folder }}/\` folder on the gh-pages branch." >> $GITHUB_STEP_SUMMARY
          fi

  # Clean up PR documentation when PR is closed
  cleanup-pr-docs:
    name: Clean up PR Documentation
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' && github.event.pull_request

    # Global deployment queue: Prevent race conditions on gh-pages branch
    concurrency:
      group: docs-deployment-queue
      cancel-in-progress: false

    steps:
      - name: Remove PR documentation with clean history
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_FOLDER="pr-${PR_NUMBER}"

          # Clone gh-pages branch
          git clone --single-branch --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages-repo
          cd gh-pages-repo

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ -d "$PR_FOLDER" ]; then
            echo "Removing documentation folder: $PR_FOLDER"

            # Create fresh orphan branch (erases all history)
            git checkout --orphan temp-branch
            git rm -rf . || true

            # Copy all folders except the PR folder we're removing
            git checkout gh-pages -- . || true
            rm -rf "$PR_FOLDER"

            # Commit and force push (erases all previous history)
            git add .
            git commit -m "Remove documentation for PR #${PR_NUMBER}"
            git branch -D gh-pages || true
            git branch -m gh-pages
            git push --force origin gh-pages

            echo "FOLDER_REMOVED=true" >> $GITHUB_ENV
          else
            echo "Documentation folder $PR_FOLDER not found, nothing to clean up"
            echo "FOLDER_REMOVED=false" >> $GITHUB_ENV
          fi

      - name: Add cleanup comment to PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const branchName = context.payload.pull_request.head.ref;
            const folderRemoved = process.env.FOLDER_REMOVED === 'true';

            const comment = `## 🧹 Documentation Cleanup

            The documentation preview for this PR has been cleaned up.

            **📋 Cleanup Details:**
            - **PR:** #${prNumber}
            - **Branch:** \`${branchName}\`
            - **Folder:** \`pr-${prNumber}/\`
            - **Status:** ${folderRemoved ? 'Successfully removed from gh-pages branch' : 'No documentation folder found'}

            > **Note:** The preview documentation is no longer accessible.
            > The \`pr-${prNumber}/\` folder has been removed from the gh-pages branch.
            > Git history has been cleaned to keep the branch lightweight.

            ---
            *🤖 Cleanup completed by GitHub Actions*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

            console.log(`Added cleanup notification to PR #${prNumber}`);
